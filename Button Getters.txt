/**
     * Gets and returns specific java swing elements (JButton, JRadioButton, JTextArea, JTextField, ArrayLists)
     */
   public JButton getCreateButton() {
		return this.ConfirmVMButton;
	}
	
	public JButton getItemButton() {
		return this.jButtonConfirmItem;
	}
	
	public JButton getItemCancelButton() {
		return this.jButtonCancelItem;
	}
	
	public JButton getRecipeCancelButton() {
		return this.jButtonCancelBurger;
	}
	
	public JButton getRecipeButton() {
		return this.jButtonConfirmBurger1;
	}
	
	public JButton getRestockButton() {
		return this.jButtonConfirmRestock;
	}
	
	public JButton getRepriceButton() {
		return this.jButtonConfirmReprice;
	}
	
	public JButton getDepositButton() {
		return this.jButtonDeposit;
	}
	
	public JButton getWithdrawButton() {
		return this.jButtonWithdraw;
	}
	
	public JButton getWithdrawAllButton() {
		return this.jButtonWithdrawAll;
	}
	
	public JButton getPrintTransacButton() {
		return this.jButtonPrintTransaction;
	}
	
	public JButton getPrintRestockButton() {
		return this.jButtonPrintRestock;
	}
	
	public JRadioButton getSpeRadioButton() {
		return this.SpeRadioButton;
	}
	
	public JTextField getVMNameText() {
		return this.VMNameText;
	}
	
	public JTextArea getTextAreaReceipt() {
		return this.jTextAreaReceipt;
	}
	
	public ArrayList<JLabel> getLabels() {
		return this.labelList;
	}
	
	public ArrayList<JSpinner> getItemSpinners() {
		return this.itemSpinnerList;
	}
	
	public ArrayList<JSpinner> getMHSpinners() {
		return this.mhSpinnerList;
	}
	
	public ArrayList<JButton> getItemButtons() {
		return this.itemButtonList;
	} 
	
	public ArrayList<JButton> getRecipeButtons() {
		return this.recipeButtonList;
	}
	
	public ArrayList<JButton> getMoneyButtons() {
		return this.moneyInputList;
	}
	
	public ArrayList<JRadioButton> getRestockButtons() {
		return this.restockRadioList;
	}
	
	public ArrayList<JRadioButton> getRepriceButtons() {
		return this.repriceRadioList;
	}
	
	public JTextField getNewPrice() {
		return this.jINewPriceTextField;
	}
	
	/**
      * Prints text onto the display text area console
	  * @param text The text to be displayed
      */
	public void displayText(String text) {
        this.jTextAreaConsole.append(text + "\n");
    }

	/**
      * Prints text onto the print text area console
	  * @param text The text to be displayed
      */
    public void displayPrint(String text) {  
	    this.jTextAreaReceipt.append(text + "\n");
	}
	
	/**
      * Clears the print text area console
      */
    public void clearPrint() {  
	    this.jTextAreaReceipt.setText(""); 
	}		 
	
	/**
      * Updates item stock displays according to stored data in model
	  * @param itemStock The 2D ArrayList of items and their stocks
      */
	public void updateItemStock(ArrayList<ArrayList<Object>> itemStock) {
		int stock = 0;
		int i = 0;
		
        for (JLabel l : this.labelList) {
            if (i < itemStock.size()) {
                stock = (int) itemStock.get(i).get(1);
                l.setText(String.valueOf(stock));
                i++;
            } 
			
			else 
                l.setText("...");
        }
	}

	/**
      * Updates item cash displays according to stored data in model
	  * @param cashStock The 2D int array of bills and their stocks
      */
    public void updateCashStock(int[][] cashStock) {
		int value = 0;
		
		for (int i = 0; i < cashStock.length; i++) {
            value = cashStock[i][1];
            this.moneyList.get(7 - i).setText("" + value);
        }
	}
	
	/**
      * Updates item price displays according to stored data in model
	  * @param itemPrices The 2D ArrayList of items and their prices
      */
    public void updatePrices(ArrayList<ArrayList<Object>> itemPrices) {
        int price = 0;
		int i = 0;
		
        for (JLabel l : this.priceList) {
            if (i < itemPrices.size()) {
                price = (int) itemPrices.get(i).get(1);
                l.setText(String.valueOf(price));
                i++;
            } 
			
			else 
                l.setText("...");
        }
	}