CreateView
- 

VendingMachineView 
- 

Controller 
- calls view and model
- prompt and perform menu operations
- write data into files

VendingMachine (stores)
- vm details
- all object instantiations of VM parts
- getters and setters

SpecialVM (stores)
- food typ (burger pizza burrito)
- available preset recipes
- number of items per recipe
- recipes chosen by the creator

FileHandler
- clear files
- load files?

CashBox (stores) 
- current money 2d array

MoneyHandler 
- process payment

Item (stores) 
- name
- calories*
- price
- stock 
- standalone 
- getters and setters

ItemRack (stores) 
- available preset items 
- items on sale
- getters and setters


INITIALIZING 
- Controller calls FileHandler to check if VM data exists 
- if no, Controller calls the view gui for CreateView 
- CreateView passes data into Controller 
- Controller writes data to files
- Controller proceeds to call VendingMachineView to prompt create, test, maintain menus

CREATE MENU
- Controller calls FileHandler to clear text files
- Controller calls view gui for CreateView 
- Controller writes data to files


TEST MENU
- Controller calls FileHandler to load text file data
- depending on isSpecial in Controller:


- if regular:
- Controller calls ItemRack and passes on-sale item data to VendingMachineView 
- VendingMachineView gets and returns user input for selected item 
- VendingMachineView confirms continuing the transaction 
- if yes, VendingMachineView prompts user input for cash, else, return null
- VendingMachineView returns item object and cash 2d array to Controller 
- Controller calls MoneyHandler to process payment 
- if payment is unsuccessful, don't do the transaction and return to the menu
- if payment is successful, Controller destroys 1 item instance from ItemRack 
- Controller writes transaction data into text files
- Controller calls VendingMachineView to narrate and dispense item


- if special:
- Controller calls View to prompt if user will buy recipe or standalone item
- if standalone item, call everything the same way as regular
- if recipe, Controller calls view to prompt if preset or custom
- if preset, Controller calls ItemRack to return the recipes and whether all ingredients are available 
- Controller passes data to VendingMachineView to display and prompt input
- if custom, Controller calls VendingMachineView to keep getting input until the user stops
- VendingMachineView confirms continuing the transaction 
- if yes, VendingMachineView prompts user input for cash, else, return null
- VendingMachineView returns arraylist of items in the recipe and cash 2d array to Controller 
- Controller calls MoneyHandler to process payment 
- if payment is unsuccessful, don't do the transaction and return to the menu
- if payment is successful, Controller destroys the right number of ingredient instances from ItemRack 
- Controller writes transaction data into text files
- Controller checks SpecialVM's attribute for the recipe type
- Controller calls VendingMachineView to narrate and dispense item

MAINTAIN MENU
- Controller calls VendingMachineView to prompt maintenance options

- for restock, Controller calls VendingMachineView to get input for what to restock
- VendingMachineView/Controller error checks input
- Controller adds an Item instance to ItemRack
- keep looping until user is done restocking 
- Controller calls FileHandler to clear restock file data
- Controller writes restock data into text file
- Controller calls VendingMachineView to display success message 

- for money refills, Controller calls MoneyHandler 
- if success, Controller calls VendingMachineView to display success message

- for history printing, Controller reads files and prints 